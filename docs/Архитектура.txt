Генеральный архитектура:


Программа разделяется на 5 слоев:


UI:
- точка входа в программу
- инициализация DI с помощью конструктора
- главный цикл обработки команд
- реестр команд (просто словарь с соответствием текст_команды : команда.
- парсер обработки команд
- Error Handler для обработки всех ошибок, чтобы пользователю выводилось понятное объяснение
- декорирование части команд как @adminonly


Примечания:
1. Показ картинок либо в браузере, либо во встроенном приложении (на основании os). Выбор той или иной опции зависит от конфига.

Application:
- управление всеми операциями в программе
- валидация правил

Domain:
- Классы сущностей в программе
- Базовая валидация полей (чисто техническая)
- Методы работы с самими собой как с сущностями (редактирование)

Repository:
- Интерфейс круда (все операции с данными, интерфейс класса базы данных) - паттерн репозиторий
- непосредственная реализация in-memory базы данных (work2)

Infrastructure:
- плагины сериализации/десериализации -> JSON-FileRepo. (work3)
- конфиги, .env:
1) инфа о хранилище
2) минимально о логах, безопасности, CLI
- хранилище для данных, строковых + фото-контент (work4)

Используемые паттерны:
1) Репозиторий - создание абстрактного интерфейса круда в repository, реализация спецификаций для более удобного поиска + unit of work для редактирования сразу нескольких сущностей в рамках одной транзакции
2) Строитель - создание разных объектов одного типа, а также сложная валиация, какие именно объекты ?
3) наблюдатель, декоратор - для логирования
4) паттерн команда для управления командами


DI:

1) устанавливаем зависимости через DI контейнер
2) в самом контейнере выбираем альтернативы с помощью простой фабрики
